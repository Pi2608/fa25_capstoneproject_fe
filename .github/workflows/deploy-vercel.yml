name: Deploy to Vercel

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main
      - nhi
      - dat
      - merge-backup

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Pull Vercel Environment Information
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "🚀 Pulling PRODUCTION environment..."
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "🚧 Pulling PREVIEW environment..."
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi
      
      - name: Build Project Artifacts
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "🚀 Building for PRODUCTION..."
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "🚧 Building for PREVIEW..."
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
      
      - name: Deploy to Vercel
        id: vercel
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "🚀 Deploying to PRODUCTION..."
            DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            echo "🚧 Deploying PREVIEW for branch: $BRANCH_NAME..."
            DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi
          
          # Clean up URL
          DEPLOY_URL=$(echo "$DEPLOY_URL" | tr -d '[:space:]' | grep -E '^https://.*\.vercel\.app' || echo "$DEPLOY_URL")
          
          # Validate deployment URL
          if [ -z "$DEPLOY_URL" ]; then
            echo "❌ Deployment failed - no URL returned"
            exit 1
          fi
          
          echo "✅ Deployment successful!"
          echo "🔗 URL: $DEPLOY_URL"
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
      
      - name: Show Deployment URL
        run: |
          echo "🔗 Deployed to: ${{ steps.vercel.outputs.deploy_url }}"
          echo "📱 Branch: ${GITHUB_REF##*/}"
          echo "🔄 Commit: ${GITHUB_SHA:0:7}"
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = '${{ steps.vercel.outputs.deploy_url }}';
            const branch = context.ref.replace('refs/heads/', '');
            const commit = context.sha.substring(0, 7);
           
            // Find open PR for this branch
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
           
            if (pulls.length > 0) {
              const pr = pulls[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `🚀 **Preview Deployment Ready!**
               
                📱 **Branch:** \`${branch}\`
                🔄 **Commit:** \`${commit}\`
                🔗 **Preview URL:** ${deployUrl}
               
                The latest changes have been deployed and are ready for review!`
              });
            }